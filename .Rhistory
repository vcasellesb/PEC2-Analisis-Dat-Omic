}
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors,
xlim=c(min(pcX$x[,1])-100, max(pcX$x[,1])+100),
ylim=c(min(pcX$x[,2])-100, max(pcX$x[,2])+100),
)
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=0.8)
titulo <- ifelse(dataDesc=="", "Visualización de las dos primeras componentes", dataDesc)
title(titulo, cex=0.8)
}
plotPCA(exprs(eset_eth), labels=colnames(eset_eth))
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors,
xlim=c(min(pcX$x[,1])-1000, max(pcX$x[,1])+1000),
ylim=c(min(pcX$x[,2])-1000, max(pcX$x[,2])+1000),
)
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=0.8)
titulo <- ifelse(dataDesc=="", "Visualización de las dos primeras componentes", dataDesc)
title(titulo, cex=0.8)
}
plotPCA(exprs(eset_eth), labels=colnames(eset_eth))
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors,
xlim=c(min(pcX$x[,1])-1000, max(pcX$x[,1])+1000),
ylim=c(min(pcX$x[,2])-1000, max(pcX$x[,2])+1000),
)
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=0.8)
titulo <- ifelse(dataDesc=="", "Visualización de las dos primeras componentes", dataDesc)
title(titulo, cex=0.8)
}
plotPCA(exprs(eset_eth), labels=colnames(eset_eth))
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors,
xlim=c(min(pcX$x[,1])-10000, max(pcX$x[,1])+10000),
ylim=c(min(pcX$x[,2])-10000, max(pcX$x[,2])+10000),
)
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=0.8)
titulo <- ifelse(dataDesc=="", "Visualización de las dos primeras componentes", dataDesc)
title(titulo, cex=0.8)
}
plotPCA(exprs(eset_eth), labels=colnames(eset_eth))
boxplot(exprs(eset_eth))
boxplot((eset_eth))
boxplot(eset_eth, las=2)
boxplot(eset_eth, las=2, horizontal=TRUE)
?boxplot
boxplot(eset_eth, las=1, horizontal=TRUE)
boxplot(eset_eth, las=2, horizontal=TRUE)
boxplot(eset_eth, las=1, horizontal=TRUE)
knitr::include_graphics(c('report_exprsdata/out hm.png'))
knitr::include_graphics(c('report_exprsdata/out hm.png'))
knitr::include_graphics(c('report_exprsdata/box.png'))
knitr::include_graphics(c('report_exprsdata/hm.png'))
knitr::include_graphics(c('report_exprsdata/hm.png', 'report_exprsdata/msd.png'))
knitr::include_graphics(c('report_exprsdata/hm.png', 'report_exprsdata/msd.png', 'report_exprsdata/dens.svg'))
boxplot(exprs(eset_eth), las=1, horizontal=TRUE)
boxplot(eset_eth, las=1, horizontal=TRUE)
eset_eth <- gse[[1]]
boxplot(eset_eth, las=1, horizontal=TRUE)
boxplot(eset_eth, las=1, horizontal=TRUE)
?boxplot
BiocGenerics::boxplot(eset_eth, las=1, horizontal=TRUE)
BiocGenerics::boxplot(eset_eth, horizontal=TRUE)
BiocGenerics::boxplot(eset_eth@experimentData, las=1, horizontal=TRUE)
BiocGenerics::boxplot(exprs(eset_eth), las=1, horizontal=TRUE)
BiocGenerics::boxplot(eset_eth, which='all', , cex.axis=0.6, names = colnames(eset_eth), las=1, horizontal=TRUE, )
BiocGenerics::boxplot(eset_eth, which='all', , cex.axis=0.6, names = colnames(eset_eth), las=1, horizontal=TRUE)
boxplot(eset_eth, which='all', cex.axis=0.6, names = colnames(eset_eth), las=1, horizontal=TRUE)
colnames(eset_eth)
boxplot(eset_eth, which='all', cex.axis=0.6, names = as.character(colnames(eset_eth)), las=2, horizontal=TRUE)
as.character(colnames(eset_eth))
boxplot(eset_eth , which='all', cex.axis=0.6, names = colnames(eset_eth), las=1, horizontal=TRUE)
updateR
updateR()
R.version()
R.version
boxplot(eset_eth , which='all', cex.axis=0.6, names = colnames(eset_eth), las=1, horizontal=TRUE)
boxplot(eset_eth , which='all', cex.axis=0.6,
names = colnames(eset_eth), las=1, horizontal=TRUE)
boxplot(eset_eth ~ pData(eset_eth), which='all', cex.axis=0.6,
names = colnames(eset_eth), las=1, horizontal=TRUE)
boxplot(exprs(eset_eth) ~ pData(eset_eth), which='all', cex.axis=0.6,
names = colnames(eset_eth), las=1, horizontal=TRUE)
boxplot(exprs(eset_eth) ~ colnames(eset_eth), which='all', cex.axis=0.6,
names = colnames(eset_eth), las=1, horizontal=TRUE)
boxplot(exprs(eset_eth), which='all', cex.axis=0.6,
names = colnames(eset_eth), las=1, horizontal=TRUE)
knitr::include_graphics(c('report_exprsdata/hm.png', 'report_exprsdata/msd.png',
'report_exprsdata/dens.svg', 'report_exprsdata/box'))
knitr::include_graphics(c('report_exprsdata/hm.png', 'report_exprsdata/msd.png',
'report_exprsdata/dens.svg', 'report_exprsdata/box.png'))
Per a dur a terme el control de qualitat, faig servir la funció `arrayQualityMetrics` per a fer el control de qualitat de les dades, però no mostro el codi. A continuació, mostro els gràfics més importants que en resulten.
```{r}
knitr::include_graphics(c('report_exprsdata/hm.png', 'report_exprsdata/msd.png',
'report_exprsdata/dens.svg', 'report_exprsdata/box.png'))
plotPCA(exprs(eset_eth), labels=colnames(eset_eth))
plotPCA(exprs(eset_eth), labels=colnames(eset_eth), colors=c(2, 3))
plotPCA(exprs(eset_eth), labels=colnames(eset_eth), colors=c(3))
plotPCA(exprs(eset_eth), labels=colnames(eset_eth), colors=c(3, 4))
plotPCA(exprs(eset_eth), labels=colnames(eset_eth))
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors,
xlim=c(min(pcX$x[,1])-10000, max(pcX$x[,1])+10000),
ylim=c(min(pcX$x[,2])-10000, max(pcX$x[,2])+10000),
)
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=0.8)
titulo <- ifelse(dataDesc=="", "Visualización de las dos primeras componentes",
dataDesc)
title(titulo, cex=0.8)
}
plotPCA(exprs(eset_eth), labels=colnames(eset_eth))
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors,
xlim=c(min(pcX$x[,1])-10000, max(pcX$x[,1])+10000),
ylim=c(min(pcX$x[,2])-10000, max(pcX$x[,2])+10000),
)
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=0.8)
titulo <- ifelse(dataDesc=="", "Visualización de las dos primeras componentes",
dataDesc)
title(titulo, cex=0.8)
}
plotPCA(exprs(eset_eth), labels=colnames(eset_eth))
knitr::opts_chunk$set(echo = TRUE)
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors,
xlim=c(min(pcX$x[,1])-10000, max(pcX$x[,1])+10000),
ylim=c(min(pcX$x[,2])-10000, max(pcX$x[,2])+10000),
)
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=0.8)
titulo <- ifelse(dataDesc=="", "PCA Plot",
dataDesc)
title(titulo, cex=0.8)
}
plotPCA(exprs(eset_eth), labels=colnames(eset_eth))
plotPCA(exprs(eset_eth), labels=colnames(eset_eth), scale=TRUE)
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors,
xlim=c(min(pcX$x[,1], max(pcX$x[,1])),
ylim=c(min(pcX$x[,2]), max(pcX$x[,2])),
)
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=0.8)
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors,
xlim=c(min(pcX$x[,1]), max(pcX$x[,1])),
ylim=c(min(pcX$x[,2]), max(pcX$x[,2])),
)
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=0.8)
titulo <- ifelse(dataDesc=="", "PCA Plot",
dataDesc)
title(titulo, cex=0.8)
}
plotPCA(exprs(eset_eth), labels=colnames(eset_eth), scale=TRUE)
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors,
xlim=c(min(pcX$x[,1])-10000, max(pcX$x[,1])+10000),
ylim=c(min(pcX$x[,2])-10000, max(pcX$x[,2])+10000),
)
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=0.8)
titulo <- ifelse(dataDesc=="", "PCA Plot",
dataDesc)
title(titulo, cex=0.8)
}
plotPCA(exprs(eset_eth), labels=colnames(eset_eth))
citation('arrayQualityMetrics')
knitr::include_graphics(c('report_exprsdata/hm.png', 'report_exprsdata/msd.png',
'report_exprsdata/dens.svg', 'report_exprsdata/box.png'))
citation('genefilter')
browseVignettes('genefilter')
varLabels(eset_eth)
pData(eset_eth)
as.Dataframe(pData(eset_eth))
as.data.frame(pData(eset_eth))
pData(eset_eth)$supplementary_file
pData(eset_eth)$characteristics_ch1
pData(eset_eth)
knitr::kable(pData(gse[[1]])[, c(1, 7:9, 31)])
class(eset_eth)
eset_eth
unique(pData(gse[[1]])$channel_count)
unique(pData(gse[[1]])$characteristic_ch1)
unique(pData(gse[[1]]))
unique(pData(gse[[1]])$characteristics_ch1)
unique(pData(gse[[1]]))
knitr::kable(pData(gse[[1]])[, 1])
knitr::kable(pData(gse[[1]])[, c(1)])
knitr::kable(pData(gse[[1]])[, c(1, 7:9, 31)])
knitr::kable(pData(gse[[1]])[, c(1,31)])
citation('BioConductor')
citation("BiocVersion")
BiocVersion
BiocVersion()
BiocVersion::
require(genefilter)
filtered_eset = nsFilter(eset_eth, var.func=IQR, var.cutoff=0.75, var.filter=TRUE,
require.entrez=TRUE, filterByQuantile=TRUE)
annotation(eset_eth)
getGEO('GPL341')
require(GEOquery); getGEO('GPL341')
annotation(eset_eth) <- getGEO(annotation(eset_eth))
annotatio(eset_eth)
annotation(eset_eth)
annotation(eset_eth) <- getGEO('GPL341')
require(genefilter)
annotation(eset_eth) <- 'rae230a.db'
if (!require(annotation(eset_eth))) BiocManager::install(annotation(eset_eth))
if (!require(annotation(eset_eth), character.only = T)) BiocManager::install(annotation(eset_eth))
require(genefilter)
annotation(eset_eth) <- 'rae230a.db'
if (!require(annotation(eset_eth), character.only = T)) BiocManager::install(annotation(eset_eth))
filtered_eset = nsFilter(eset_eth, var.func=IQR, var.cutoff=0.75, var.filter=TRUE,
require.entrez=TRUE, filterByQuantile=TRUE)
filtered_eset$
```
# Referències
filtered_eset$filter.log
require(genefilter)
annotation(eset_eth) <- 'rae230a.db'
if (!require(annotation(eset_eth), character.only = T))
BiocManager::install(annotation(eset_eth))
filtered_eset = nsFilter(eset_eth, var.func=IQR, var.cutoff=0.75, var.filter=TRUE,
require.entrez=TRUE, filterByQuantile=TRUE)
filtered_eset$filter.log
knitr::opts_chunk$set(echo = TRUE)
library(Biobase)
require(GEOquery)
gse <- getGEO('GSE3311')
unique(pData(gse[[1]])$channel_count)
unique(pData(gse[[1]])$characteristics_ch1)
knitr::kable(pData(gse[[1]])[, c(1,31)])
colnames(gse[[1]]) <- paste(c(rep("Ctrl", 3), rep('Eth', 3)), c("01", "02", "03"),
sep='')
eset_eth <- gse[[1]]
class(eset_eth)
require(arrayQualityMetrics)
arrayQualityMetrics(eset_eth, outdir='report_exprsdata', force=T)
knitr::include_graphics(c('report_exprsdata/hm.png', 'report_exprsdata/msd.png',
'report_exprsdata/dens.svg', 'report_exprsdata/box.png'))
boxplot(exprs(eset_eth), which='all', cex.axis=0.6,
names = colnames(eset_eth), las=1, horizontal=TRUE)
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors,
xlim=c(min(pcX$x[,1])-10000, max(pcX$x[,1])+10000),
ylim=c(min(pcX$x[,2])-10000, max(pcX$x[,2])+10000),
)
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=0.8)
titulo <- ifelse(dataDesc=="", "PCA Plot",
dataDesc)
title(titulo, cex=0.8)
}
plotPCA(exprs(eset_eth), labels=colnames(eset_eth))
require(genefilter)
annotation(eset_eth) <- 'rae230a.db'
if (!require(annotation(eset_eth), character.only = T))
BiocManager::install(annotation(eset_eth))
filtered_eset = nsFilter(eset_eth, var.func=IQR, var.cutoff=0.75, var.filter=TRUE,
require.entrez=TRUE, filterByQuantile=TRUE)
filtered_eset$filter.log
filtrado_manual = rowQ(eset_eth, ceiling(0.75 * ncol(eset_eth))) - rowQ(eset, floor(0.25 * ncol(eset_eht)))
filtrado_manual = rowQ(eset_eth, ceiling(0.75 * ncol(eset_eth))) - rowQ(eset, floor(0.25 * ncol(eset_eth)))
?rowQ
filtrado_manual = rowQ(exprs(eset_eth), ceiling(0.75 * ncol(exprs(eset_eth)))) - rowQ(exprs(eset), floor(0.25 * ncol(exprs(eset_eth))))
filtrado_manual = rowQ(eset_eth, ceiling(0.75 * ncol(eset_eth))) - rowQ(eset_eth, floor(0.25 * ncol(eset_eth)))
filtrado_manual
rowQ(imat=eset_eth)
rowQ(imat=eset_eth, which=c(25, 50, 75))
filtrado_manual = rowQ(exprs(eset_eth), ceiling(0.75 * ncol(exprs(eset_eth)))) - rowQ(exprs(eset), floor(0.25 * ncol(exprs(eset_eth))))[1]
filtrado_manual = rowQ(eset_eth, ceiling(0.75 * ncol(eset_eth))) - rowQ(eset_eth, floor(0.25 * ncol(eset_eth)))[1]
filtrado_manual
filtrado_manual = rowQ(eset_eth, ceiling(0.75 * ncol(eset_eth))) - rowQ(eset_eth, floor(0.25 * ncol(eset_eth)))
filtrado_manual[13]
rowQ(eset_eth[13], 0.5)
rowQ(eset_eth[13, ], 0.5)
rowQ(eset_eth[13, ], 50)
rowQ(eset_eth, 50)
rowQ(eset_eth, 0.5 * ncol(eset_eth))
rowQ(eset_eth, 0.5 * ncol(eset_eth))[13]
vec <- c(2, 4, 6, 8, 10)
rowQ(vec, 2)
rowQ(as.matrix(vec), 2)
rowQ(as.matrix(vec, byrow=TRUE), 2)
rowQ(as.matrix(vec, ncol=5), 2)
rowQ(matrix(vec, ncol=5), 2)
rowQ(matrix(vec, ncol=5), 3)
rowQ(matrix(vec, ncol=5), 3)
rowQ(matrix(vec, ncol=5), 3)
rowQ(matrix(vec, ncol=5), ceiling(5 * 0.75)) - rowQ(matrix(vec, ncol=5), floor(5*0.25))
rowQ(matrix(vec, ncol=5), ceiling(5*0.5))
5*0.5
vec <- c(2, 4, 6, 8, 50)
vec <- c(2, 124, 6, 8, 30)
rowQ(matrix(vec, ncol=5), ceiling(5 * 0.75)) - rowQ(matrix(vec, ncol=5), floor(5*0.25))
mat <- matrix(vec, ncol=5)
rowQ(mat, 5*0.5)
rowQ(mat, 5*0.75) - rowQ(mat, 5*0.25)
rowQ(mat, ceiling(5*0.75)) - rowQ(mat, floor(5*0.25))
rowQ(mat, 5*0.75) - rowQ(mat, 5*0.25)
rowQ(mat, 5*0.75)
rowQ(mat, 2.5)
rowQ(mat, 1.25)
rowQ(mat, 1.75)
rowMax
rowMax
rowMax
View(rowMax)
View(rowMin)
?quantile
vec
length(vec)
length(vec) / 2
n = 2*2 + 1
vec[2+1]
8070 / nrow(exprs(eset_eth))
require(genefilter)
annotation(eset_eth) <- 'rae230a.db'
if (!require(annotation(eset_eth), character.only = T))
BiocManager::install(annotation(eset_eth))
filtered_eset = nsFilter(eset_eth, var.func=IQR, var.cutoff=0.75, var.filter=TRUE,
require.entrez=TRUE, filterByQuantile=TRUE)
filtered_eset$filter.log
nrow(exprs(eset_eth))
8070 / 15923
filtered_eset = nsFilter(eset_eth, var.func=IQR, var.cutoff=0.5, var.filter=TRUE,
require.entrez=TRUE, filterByQuantile=TRUE)
filtered_eset$filter.log
8070 / nrow(exprs(eset_eth))
5391 / nrow(exprs(eset_eth))
filtered_eset = nsFilter(eset_eth, var.func=IQR, var.cutoff=0.75, var.filter=TRUE,
require.entrez=TRUE, filterByQuantile=TRUE)
filtered_eset$filter.log
5391 / nrow(exprs(eset_eth))
8070 / nrow(exprs(eset_eth))
filtrado_manual = rowQ(eset_eth, ceiling(0.75 * ncol(eset_eth))) -
rowQ(eset_eth, floor(0.25 * ncol(eset_eth)))
q.75 = quantile(filtrado_manual, 0.75)
filtrado_manual = rowQ(eset_eth, ceiling(0.75 * ncol(eset_eth))) -
rowQ(eset_eth, floor(0.25 * ncol(eset_eth)))
q.75 = quantile(filtrado_manual, 0.75)
sum(filtrado_manual<q.75)
15124/35556
5041/35556
filtered_eset$filter.log$numLowVar / nrow(exprs(eset_eth))
filtered_prova$filter.log
filtered_prova <- nsFilter(eset_eth)
filtered_prova$filter.log
filtered_prova <- nsFilter(eset_eth)
filtered_prova$filter.log
print(filtered_prova$filter.log$numLowVar / nrow(eset_eth))
View(nsFilter)
2537 + 2621 + 6
2537 + 2621 + 6
15923 - 5164
8070 / 10759
nrow(eset_eth)
print(c("8070/nrow(eset_eth) == ", 8070/nrow(eset_eth))
)
?featureFilter
pData(filtered_eset)
pData(filtered_eset[[1]])
colnames(filtered_eset)
colnames(filtered_eset[[1]])
rowttests(x = filtered_eset, fac=factor(colnames(filtered_eset[[1]])))
rowttests(x = exprs(filtered_eset), fac=factor(colnames(filtered_eset[[1]])))
rowttests(x = filtered_eset[[1]], fac=factor(colnames(filtered_eset[[1]])))
pData(filtered_eset)
filtered_eset
myeset <- filtered_eset$eset
rowttests(x = myeset, fac=factor(colnames(filtered_eset[[1]])))
pData(myeset)
pData(myeset)$title
pData(myeset)$titl
pData(myeset)$treat
rowttests(x = myeset, fac=factor(colnames(myeset)))
colnames(myeset)
groups <- str_replace_all(colnames(myeset), "[:digit:]", "")
require(stringr)
myeset <- filtered_eset$eset
groups <- str_replace_all(colnames(myeset), "[:digit:]", "")
rowttests(x = myeset, fac=groups)
groups
rowttests(x = myeset, fac=factor(groups))
mean(filtered_eset$eset)
mean(exprs(filtered_eset$eset)[1:3]) - mean(exprs(filtered_eset$eset)[4:6])
mean(exprs(filtered_eset$eset)[1, 1:3]) - mean(exprs(filtered_eset$eset)[1, 4:6])
colnames(myeset)
exp(log(3))
exp(log(3/2))
exp(log(3) - log(2))
exp(log(3) - log(2))
-exp(log(3) - log(2))
log(3)
log(2)
log3 - log(2)
log(3) - log(2)
exp(log(3) - log(2))
exp(0)
exp(0) + exp(0.45)
exp(0) * exp(0.45)
exp(0) * exp(0.405)
exp(0) * exp(0.4054651)
exp(0.2) * exp(0.2054651)
design <- model.matrix(~ 0+factor(c(1,1,1,2,2,3,3,3)))
design
filtered_eset$eset
design <- model.matrix(~0 + factor(c(1,1,1,2,2,2)))
show(design )
colnames(design) <- groups
groups
colnames(design) <- unique(groups)
show(design)
rownames(design) <- colnames(exprs(myeset))
show(design)
show(design)
fit <- lmFit(myeset, design)
fit <- lmFit(myeset, design)
fit <- lmFit(myeset, design)
require(limma)
fit <- lmFit(myeset, design)
require(limma)
fit <- lmFit(myeset, design)
summary(fit)
fit$coefficients
fit$coefficients[1,]
sum(fit$coefficients[1,])
sum(fit$coefficients[1,])
sum(fit$coefficients[1,])
exprs(myeset)[1,]
exprs(myeset)[1,]
exprs(myeset)[1,]
exprs(myeset)[1,]
design
t(design)
t(design) %*% fit$coefficients
design %*% fit$coefficients[1]
design
fit$coefficients[1, ]
design %*% fit$coefficients[1, ]
design %*% fit$coefficients[1, ]
design %*% fit$coefficients[1, ]
design %*% fit$coefficients[1, ]
design %*% fit$coefficients[1, ]
design %*% fit$coefficients[1, ]
design %*% fit$coefficients[1, ]
exprs(myeset)[1,]
701 + 871 + 415
701 + 871 + 415 / 3
(701 + 871 + 415) / 3
